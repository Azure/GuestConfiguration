pr:
  autoCancel: true
  branches:
    include:
      - master
      - rollback
      - feature/*
      - bug/*
      - chore/*
  paths:
    exclude:
        - /bin/*
        - /tools/azure-pipelines-pr.yml
        - /tools/azure-pipelines-release.yml
        - README.md
        - CODE_OF_CONDUCT.md
        - SECURITY.md
        - LICENSE
        - changelog.md
        - .gitignore
        - .github/*

jobs:
  - job: Test
    strategy:
      matrix:
        # Blocking issue in 18.04
        # running cmdlets from Ubuntu 18.04:
        #  imageName: ubuntu-18.04
        running cmdlets from Ubuntu 16.04:
          imageName: ubuntu-16.04
        running cmdlets from macOS Mojave:
          imageName: macOS-10.14
        running cmdlets from macOS Catalina:
          imageName: macOS-10.15
        running cmdlets from Windows 2019:
          imageName: windows-2019
        running cmdlets from Windows 2016:
          imageName: vs2017-win2016
    pool:
      vmImage: $(imageName)
    steps:
      - task: UniversalPackages@0
        displayName: Universal download
        inputs:
          command: download
          vstsFeed: guestconfiguration
          vstsFeedPackage: gc_agents
          vstsPackageVersion: '*'
          downloadDirectory: '$(Build.SourcesDirectory)/bin/'
      - task: PowerShell@2
        displayName: Install modules
        inputs:
          pwsh: 'true'
          targetType: inline
          failOnStderr: true
          errorActionPreference: stop
          script: |
            $modules = (Import-PowerShellDataFile "$env:BUILD_SOURCESDIRECTORY/GuestConfiguration.psd1").RequiredModules
            $modules += @('PowerShellGet','PSScriptAnalyzer')
            Install-Module -Name $modules -Force
      - task: PowerShell@2
        enabled: 'false'
        continueOnError: 'true'
        displayName: Pester v4 unit tests
        inputs:
          pwsh: 'true'
          targetType: inline
          failOnStderr: true
          errorActionPreference: stop
          script: |
            write-host "ps version: $($PSVersionTable | % PSVersion)"
            $Pester = Invoke-Pester -OutputFile "$env:COMMON_TESTRESULTSDIRECTORY/TEST.xml" -OutputFormat NUnitXml -PassThru
            if ($Pester.FailedCount -gt 0) {
              Write-Error "$($Pester.FailedCount) tests failed."
            }
      - task: PowerShell@2
        enabled: 'true'
        displayName: Install Pester v5
        inputs:
          pwsh: 'true'
          targetType: inline
          failOnStderr: true
          errorActionPreference: stop
          script: |
            Install-Module -Name 'Pester' -Force -AllowPreRelease
      - task: PowerShell@2
        enabled: 'true'
        displayName: Pester v5 unit tests
        inputs:
          pwsh: 'true'
          targetType: inline
          failOnStderr: true
          errorActionPreference: stop
          script: |
            Invoke-Pester -CI
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: '$(Common.TestResultsDirectory)/TEST.xml'
        displayName: Publish test result
  - job: PublishArtifactToAzureDevOpsBuild
    dependsOn: Test
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: PowerShell@2
        displayName: Stage module artifact
        inputs:
          pwsh: 'true'
          targetType: inline
          failOnStderr: true
          errorActionPreference: stop
          script: |
            Install-Module 'Az.Accounts','Az.Resources' -Repository 'PSGallery' -Force
            New-Item $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration -type Directory
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/DscResources -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/DscResources -Recurse
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/helpers -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/helpers -Recurse
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/GuestConfiguration.psd1 -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/GuestConfiguration.psd1
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/GuestConfiguration.psm1 -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/GuestConfiguration.psm1
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/LICENSE -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/LICENSE
      - task: UniversalPackages@0
        displayName: Universal download
        inputs:
          command: download
          vstsFeed: guestconfiguration
          vstsFeedPackage: gc_agents
          vstsPackageVersion: '*'
          downloadDirectory: '$(Build.ArtifactStagingDirectory)/GuestConfiguration/bin/'
      - task: PublishPipelineArtifact@1
        displayName: Publish artifact
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/GuestConfiguration'
          artifactName: GuestConfiguration
