trigger: none

variables:
  triggeringPipelineAlias: PublicPipeline
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults

resources:
  pipelines:
  - pipeline: PublicPipeline # $(triggeringPipelineAlias)
    source: PowerShell.GuestConfiguration (Public)
    trigger:
      branches:
        - master

pool:
  vmImage: 'ubuntu 16.04'

stages:
  - stage: init_private_build
    jobs:
      - job: retrieve_previous_pipeline_artifact
        displayName: 'Downloading Public Pipeline Output'
        timeoutInMinutes: 0
        steps:
          - download: PublicPipeline # $(triggeringPipelineAlias)
            artifact: $(buildFolderName)

          - task: GitVersion@5
            name: gitVersion
            displayName: 'Evaluate Next Version'
            inputs:
              runtime: 'core'
              configFilePath: 'GitVersion.yml'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifact'
            inputs:
              targetPath: '$(Pipeline.Workspace)/PublicPipeline/$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'

          - pwsh: gci .

          - task: PowerShell@2
            enabled: true
            displayName: Enable Experimental Feature
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                ./build.ps1 -Tasks noop
                Import-Module GuestConfiguration
                Enable-ExperimentalFeature -Name GuestConfiguration.Pester
                Enable-ExperimentalFeature -Name PSDesiredStateConfiguration.InvokeDscResource
                # Enable-ExperimentalFeature -Name PS7DscSupport
                $userConfig =  Join-Path -Path (split-path -parent $PROFILE.CurrentUserCurrentHost) -ChildPath 'powershell.config.json'
                Write-Host "Testing PS Config at '$userConfig'."
                if (Test-Path -Path $userConfig)
                {
                    $config = Get-Content -Raw $userConfig | ConvertFrom-Json
                    $config.ExperimentalFeatures += 'PS7DscSupport'
                    Set-Content -Value ($config | ConvertTo-json) -Path $userConfig -Force -Encoding utf8
                    Write-Host "PS Config updated at '$userConfig'."
                    Get-Content -Raw $userConfig | Write-Host
                }
                else
                {
                    Write-Host "PowerShell Config not found at '$userConfig'."
                }
                Uninstall-AzureRm

          - task: PowerShell@2
            name: test
            displayName: 'Run Integration Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'Tests/GuestConfigurationModule.Tests.ps1'"
              pwsh: true
