trigger: none

variables:
  triggeringPipelineAlias: PublicPipeline
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults

resources:
  pipelines:
  - pipeline: PublicPipeline # $(triggeringPipelineAlias)
    source: Azure.GuestConfiguration.Public
    trigger:
      branches:
        - master

pool:
  vmImage: 'ubuntu 16.04'

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package and Sign Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          - pwsh: |
              dotnet tool install --global GitVersion.Tool
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.psobject.properties.Foreach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
            name: gitVersion

          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
              GitHubToken: $(GitHubToken)

          ##### SIGN ARTIFACT TASK HERE
          - task: EsrpCodeSigning@1
            displayName: ESRP CodeSigning
            inputs:
              ConnectedServiceName: "GuestConfigModuleSigning"
              FolderPath: '$(buildFolderName)/GuestConfiguration'
              Pattern: '*.psm1, *.ps1, *.exe, *.dll, *.psd1'
              signConfigType: inlineSignParams
              CertificateId: CP-450779-Pgp
              inlineOperation: >-
                [
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolSign",
                    "Parameters": {
                      "OpusName": "Microsoft",
                      "OpusInfo": "http://www.microsoft.com",
                      "FileDigest": "/fd \"SHA256\"",
                      "PageHash": "/NPH",
                      "TimeStamp": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                    },
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  },
                  {
                    "KeyCode": "CP-230012",
                    "OperationCode": "SigntoolVerify",
                    "Parameters": {},
                    "ToolName": "sign",
                    "ToolVersion": "1.0"
                  }
                ]
          - task: PowerShell@2
            enabled: true
            displayName: Move CodeSignSummary File
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                mv $(buildFolderName)/GuestConfiguration/CodeSign* ../

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_Unit_Windows
        displayName: 'Windows Unit Test'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            enabled: true
            displayName: Enable Experimental Feature
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                ./build.ps1 -Tasks noop -ResolveDependency
                Get-Module GuestConfiguration -ListAvailable
                Import-Module GuestConfiguration
                Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
                Install-Module -Name PSDesiredStateConfiguration -AllowPrerelease -Confirm:$false
                Import-Module -Name PSDesiredStateConfiguration
                Get-Module PSDesiredStateConfiguration
                Enable-ExperimentalFeature -Name GuestConfiguration.Pester
                Enable-ExperimentalFeature -Name PSDesiredStateConfiguration.InvokeDscResource
                Uninstall-AzureRm
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'Tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit_Windows'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)_windows
              parallel: true

      - job: Test_Unit_Linux
        displayName: 'Linux Unit Test'
        pool:
          vmImage: 'ubuntu-18.04'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            enabled: true
            displayName: Install pwsh-preview
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                # Update the list of packages
                sudo apt-get update
                # Install pre-requisite packages.
                sudo apt-get install -y wget apt-transport-https software-properties-common
                # Download the Microsoft repository GPG keys
                wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
                # Register the Microsoft repository GPG keys
                sudo dpkg -i packages-microsoft-prod.deb
                # Update the list of products
                sudo apt-get update
                # Enable the "universe" repositories
                sudo add-apt-repository universe
                # Install PowerShell
                sudo apt-get install -y powershell-preview

          - task: PowerShell@2
            enabled: true
            displayName: Enable Experimental Feature
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                pwsh-preview -c 'Enable-ExperimentalFeature -Name PSSubsystemPluginModel'
                pwsh-preview -c { ./build.ps1 -Tasks noop -ResolveDependency
                Import-Module GuestConfiguration
                Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
                Install-Module -Name PSDesiredStateConfiguration -AllowPrerelease -Confirm:$false -Force
                Import-Module -Name PSDesiredStateConfiguration -Force
                Get-Module PSDesiredStateConfiguration -ListAvailable
                Enable-ExperimentalFeature -Name GuestConfiguration.Pester
                Enable-ExperimentalFeature -Name PSDesiredStateConfiguration.InvokeDscResource
                Uninstall-AzureRm
                }
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                $ProgressPreference = 'SilentlyContinue'
                if ($IsWindows) {
                  ./build.ps1 -Tasks 'test' -PesterScript 'Tests/Unit'
                } elseif ($IsLinux) {
                    sudo pwsh-preview {
                        $ProgressPreference = 'SilentlyContinue'
                        ./build.ps1 -Tasks 'test' -PesterScript 'Tests/Unit'
                    }
                }
                $Error[0..2] | ConvertTo-Json
                Write-Host '----------------------------------------'
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit_Linux'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)_Linux
              parallel: true

  - stage: Publish
    dependsOn: Test
    jobs:
      - job: Publish
        displayName: 'Pubilsh Module'
        pool:
          vmImage: 'ubuntu-18.04'
        timeoutInMinutes: 0
        condition: |
          and
          (
            in(stageDependencies.Test.Test_Unit_Windows.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
            in(stageDependencies.Test.Test_Unit_Linux.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
          )
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          # - task: PowerShell@2
          #   name: publishRelease
          #   displayName: 'Publish Release'
          #   inputs:
          #     filePath: './build.ps1'
          #     arguments: '-tasks publish -ResolveDependency'
          #     pwsh: true
          #   env:
          #     GitHubToken: $(GitHubToken)
          #     GalleryApiToken: $(GalleryApiToken)
          #     PublishModuleWhatIf: $True
