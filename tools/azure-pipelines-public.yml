trigger:
  branches:
    include:
    - master
    - '*' # Build all branches (early feedback for devs and trigger fork builds)
  paths:
    include:
    - source/*
  tags:   # build tags when it's a release (not a prerelease, because pre-releases are already triggered by update of main branch)
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults
  sourceFolderName: source

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:

          - pwsh: |
              dotnet tool install --global GitVersion.Tool
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.psobject.properties.Foreach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
            name: gitVersion

          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
              GitHubToken: $(GitHubToken)

          # - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
          #   displayName: 'Component Detection'
          #   inputs:
          #     failOnAlert: true

          ##### SIGN ARTIFACT TASK HERE

          # - task: PkgESCodeSign@10
          #   displayName: 'CodeSign'
          #   env:
          #     SYSTEM_ACCESSTOKEN: $(System.AccessToken)
          #   inputs:
          #     signConfigXml: '$(buildFolderName)\tools\SignConfig.xml'
          #     inPathRoot: '$(buildFolderName)\GuestConfiguration'
          #     outPathRoot: '$(buildFolderName)\GuestConfiguration' # can we sign in-place?
          #   condition: |
          #     and(
          #       succeeded(),
          #       or(
          #         eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          #         startsWith(variables['Build.SourceBranch'], 'refs/tags/')
          #       ),
          #       contains(variables['System.TeamFoundationCollectionUri'], 'GuestConfiguration')
          #     )


          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      # - job: Test_HQRM
      #   displayName: 'HQRM'
      #   pool:
      #     vmImage: 'ubuntu-latest'
      #   timeoutInMinutes: 0
      #   steps:
      #     - task: DownloadPipelineArtifact@2
      #       displayName: 'Download Pipeline Artifact'
      #       inputs:
      #         buildType: 'current'
      #         artifactName: $(buildArtifactName)
      #         targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
      #     - task: PowerShell@2
      #       enabled: true
      #       displayName: Enable Experimental Feature
      #       inputs:
      #         pwsh: true
      #         targetType: inline
      #         continueOnError: true
      #         script: |
      #           ./build.ps1 -Tasks noop
      #           Import-Module GuestConfiguration
      #           Enable-ExperimentalFeature -Name GuestConfiguration.Pester
      #     - task: PowerShell@2
      #       name: test
      #       displayName: 'Run HQRM Test'
      #       inputs:
      #         filePath: './build.ps1'
      #         arguments: '-Tasks hqrmtest'
      #         pwsh: true
      #     - task: PublishTestResults@2
      #       displayName: 'Publish Test Results'
      #       condition: succeededOrFailed()
      #       inputs:
      #         testResultsFormat: 'NUnit'
      #         testResultsFiles: 'output/testResults/NUnit*.xml'
      #         testRunTitle: 'HQRM'

      - job: Test_Unit_Windows
        displayName: 'Windows Unit Test'
        pool:
          vmImage: 'windows-2019'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            enabled: true
            displayName: Enable Experimental Feature
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                ./build.ps1 -Tasks noop
                Import-Module GuestConfiguration
                Enable-ExperimentalFeature -Name GuestConfiguration.Pester
                Enable-ExperimentalFeature -Name GuestConfiguration.SetScenario
                Enable-ExperimentalFeature -Name PSDesiredStateConfiguration.InvokeDscResource
                Uninstall-AzureRm
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript 'Tests/Unit'"
              pwsh: true
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit_Windows'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)_windows
              parallel: true

      - job: Test_Unit_Linux
        displayName: 'Linux Unit Test'
        pool:
          vmImage: 'ubuntu-18.04'
        timeoutInMinutes: 0
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            enabled: true
            displayName: Install pwsh-preview
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                # Update the list of packages
                sudo apt-get update
                # Install pre-requisite packages.
                sudo apt-get install -y wget apt-transport-https software-properties-common
                # Download the Microsoft repository GPG keys
                wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb
                # Register the Microsoft repository GPG keys
                sudo dpkg -i packages-microsoft-prod.deb
                # Update the list of products
                sudo apt-get update
                # Enable the "universe" repositories
                sudo add-apt-repository universe
                # Install PowerShell
                sudo apt-get install -y powershell-preview

          - task: PowerShell@2
            enabled: true
            displayName: Enable Experimental Feature
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                pwsh-preview -c 'Enable-ExperimentalFeature -Name PSSubsystemPluginModel'
                pwsh-preview -c { ./build.ps1 -Tasks noop
                Import-Module GuestConfiguration
                Enable-ExperimentalFeature -Name GuestConfiguration.Pester
                Enable-ExperimentalFeature -Name GuestConfiguration.SetScenario
                Enable-ExperimentalFeature -Name PSDesiredStateConfiguration.InvokeDscResource
                Uninstall-AzureRm
                }
          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              pwsh: true
              targetType: inline
              continueOnError: true
              script: |
                $ProgressPreference = 'SilentlyContinue'
                if ($IsWindows) {
                  ./build.ps1 -Tasks 'test' -PesterScript 'Tests/Unit'
                } elseif ($IsLinux) {
                    sudo pwsh-preview {
                        $ProgressPreference = 'SilentlyContinue'
                        ./build.ps1 -Tasks 'test' -PesterScript 'Tests/Unit'
                    }
                }
                $Error[0..2] | ConvertTo-Json
                Write-Host '----------------------------------------'
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Unit_Linux'
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: $(testArtifactName)_Linux
              parallel: true

  - stage: Coverage
    dependsOn: Test
    jobs:
      - job: Code_Coverage
        displayName: 'Publish Code Coverage'
        pool:
          vmImage: 'ubuntu-latest'
        timeoutInMinutes: 0
        steps:
          - pwsh: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'
              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: dscBuildVariable
            displayName: 'Set Environment Variables'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Linux Test Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(testArtifactName)_Linux'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/$(testArtifactName)_Linux'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Windows Test Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(testArtifactName)_Windows'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/$(testArtifactName)_Windows'

          - task: PowerShell@2
            name: merge
            displayName: 'Merge Code Coverage files'
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks Merge_CodeCoverage_Files"
              pwsh: true

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Azure Code Coverage'
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'

          # - script: |
          #     bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml" -F unit
          #   displayName: 'Upload to Codecov.io'
          #   condition: succeededOrFailed()

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'guestconfiguration')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
