pr: 'none'

jobs:
  - job: Test
    strategy:
      matrix:
        # Blocking issue in 18.04
        # running cmdlets from Ubuntu 18.04:
        #  imageName: ubuntu-18.04
        running cmdlets from Ubuntu 16.04:
          imageName: ubuntu-16.04
        running cmdlets from macOS Mojave:
          imageName: macOS-10.14
        running cmdlets from macOS Catalina:
          imageName: macOS-10.15
        running cmdlets from Windows 2019:
          imageName: windows-2019
        running cmdlets from Windows 2016:
          imageName: vs2017-win2016
    pool:
      vmImage: $(imageName)
    steps:
      - task: UniversalPackages@0
        displayName: Universal download
        inputs:
          command: download
          feedsToUse: external
          externalFeedCredentials: guestconfiguration
          feedDownloadExternal: guestconfiguration
          packageDownloadExternal: gc_agents
          versionDownloadExternal: '0.0.2'
          downloadDirectory: '$(Build.SourcesDirectory)/bin/'
      - task: PowerShell@2
        displayName: Install modules
        inputs:
          pwsh: 'true'
          targetType: inline
          failOnStderr: true
          script: |
            $modules = (Import-PowerShellDataFile "$env:BUILD_SOURCESDIRECTORY/GuestConfiguration.psd1").RequiredModules
            $modules += @('PSScriptAnalyzer','Pester')
            Install-Module -Name $modules -Force -AllowClobber -SkipPublisherCheck -Repository 'PSGallery'
      - task: PowerShell@2
        enabled: 'true'
        continueOnError: 'true'
        displayName: Pester v4 unit tests
        inputs:
          pwsh: 'true'
          targetType: inline
          continueOnError: 'true'
          script: |
            write-host "ps version: $($PSVersionTable | % PSVersion)"
            write-host "pester version: $(get-module 'pester')"
            $Pester = Invoke-Pester -OutputFile "$env:COMMON_TESTRESULTSDIRECTORY/TEST.xml" -OutputFormat NUnitXml -PassThru
            if ($Pester.FailedCount -gt 0) {
              Exit "$($Pester.FailedCount)"
            }
        env: 
          AZURE_SUBSCRIPTIONID: $(AZURESUBSCRIPTIONID)
          AZURE_SERVICEPRINCIPALPASSWORD: $(AZURESERVICEPRINCIPALPASSWORD)
          AZURE_SERVICEPRINCIPALUSERNAME: $(AZURESERVICEPRINCIPALUSERNAME)
          AZURE_TENANTID: $(AZURETENANTID)
      - task: PowerShell@2
        enabled: 'true'
        displayName: Install Pester v5
        inputs:
          pwsh: 'true'
          targetType: inline
          failOnStderr: true
          errorActionPreference: stop
          script: |
            Install-Module -Name 'Pester' -Force -AllowPreRelease
      - task: PowerShell@2
        enabled: 'true'
        displayName: Pester v5 unit tests
        inputs:
          pwsh: 'true'
          targetType: inline
          continueOnError: 'true'
          script: |
            Invoke-Pester -CI
        env: 
          AZURE_SUBSCRIPTIONID: $(AZURESUBSCRIPTIONID)
          AZURE_SERVICEPRINCIPALPASSWORD: $(AZURESERVICEPRINCIPALPASSWORD)
          AZURE_SERVICEPRINCIPALUSERNAME: $(AZURESERVICEPRINCIPALUSERNAME)
          AZURE_TENANTID: $(AZURETENANTID)
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: 'testResults.xml'
        displayName: Publish test result
  - job: CodeSign
    dependsOn: Test
    pool:
      name: Package ES CodeHub Lab E
    steps:
      - task: PowerShell@2
        displayName: Stage module artifact
        inputs:
          pwsh: 'false'
          targetType: inline
          failOnStderr: true
          errorActionPreference: stop
          script: |
            New-Item $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration -type Directory
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/DscResources -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/DscResources -Recurse
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/GuestConfiguration.psd1 -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/GuestConfiguration.psd1
            Copy-Item -Path $env:BUILD_SOURCESDIRECTORY/LICENSE -Destination $env:BUILD_ARTIFACTSTAGINGDIRECTORY/GuestConfiguration/LICENSE
      - task: UniversalPackages@0
        displayName: Universal download
        inputs:
          command: download
          feedsToUse: external
          externalFeedCredentials: guestconfiguration
          feedDownloadExternal: guestconfiguration
          packageDownloadExternal: gc_agents
          versionDownloadExternal: '*'
          downloadDirectory: '$(Build.ArtifactStagingDirectory)\GuestConfiguration\bin\'
      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: 'Component Detection'
        inputs:
          failOnAlert: true
      - task: PkgESCodeSign@10
        displayName: 'CodeSign'
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        inputs:
          signConfigXml: '$(Build.SourcesDirectory)\tools\SignConfig.xml'
          inPathRoot: '$(Build.SourcesDirectory)'
          outPathRoot: '$(Build.ArtifactStagingDirectory)\GuestConfiguration'
      - task: PublishPipelineArtifact@1
        displayName: Publish artifact
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)\GuestConfiguration'
          artifactName: GuestConfiguration
